<?php

/**
 * Compare the schemas of between databases.
 *
 * For two database schemas to be considered the same, they must have the same
 * tables, where each table has the same fields, and each field has the same
 * parameters.
 *
 * Field parameters that are compared are those that are given by the MySQL
 * 'SHOW COLUMNS' command. These are: the field's name, it's type, whether the
 * field can store null values, whether the column is indexed, the default
 * values and whether the field was created with the 'auto_increment' keyword.
 */
class DbDiff {

    /**
     * Export the schema of the database into an array.
     *
     * @param string $config Config details for the database connection.
     * @param string $name Name or description of the database.
     * @return mixed|string An array structure of the exported schema, or an error string.
     */
    function export($config, $name) {

        $db = @mysql_connect($config['host'], $config['user'], $config['password']);

        if (!$db) {
            return null;
        }

        if (!mysql_select_db($config['name'], $db)) {
            return null;
        }

        //tables
        $result = mysql_query("SHOW TABLES");
        while ($row = mysql_fetch_row($result)) {
            $tables[$row[0]] = array();
        }

        foreach ($tables as $table_name => $fields) {

            $result = mysql_query("SHOW COLUMNS FROM " . $table_name, $db);
            while ($row = mysql_fetch_assoc($result)) {
                $tables[$table_name][$row['Field']] = $row;
            }
        }

        //triggers
        $triggers = array();
        $triggerResult = mysql_query("show triggers");
        while ($triggerRow = mysql_fetch_row($triggerResult)) {
            $array = array(
                'trigger' => $triggerRow[0],
                'event' => $triggerRow[1],
                'table' => $triggerRow[2],
                'statement' => $triggerRow[3],
                'timing' => $triggerRow[4],
                'created' => $triggerRow[5],
                'sql_mode' => $triggerRow[6],
                'definer' => $triggerRow[7],
                'character_set_client' => $triggerRow[8],
                'collation_connection' => $triggerRow[9],
                'db_collation' => $triggerRow[10]
            );
            $triggers[$triggerRow[0]] = base64_encode(json_encode($array));
        }

        //procedure
        $procedures = array();
        $procedureResult = mysql_query("show procedure status");
        while ($procedureRow = mysql_fetch_row($procedureResult)) {
            if ($procedureRow[0] == $config['name']) {
                $array = array(
                    'name' => $procedureRow[1],
                    'type' => $procedureRow[2],
                    'definer' => $procedureRow[3],
                    'modified' => $procedureRow[4],
                    'created' => $procedureRow[5],
                    'security_type' => $procedureRow[6],
                    'comment' => $procedureRow[7],
                    'character_set_client' => $procedureRow[8],
                    'collation_connection' => $procedureRow[9],
                    'db_collation' => $procedureRow[10],
                );
                $procedures[$procedureRow[1]] = base64_encode(json_encode($array));
            }
        }

        mysql_close();

        $data = array(
            'name' => $name,
            'time' => time(),
            'tables' => $tables,
            'triggers' => $triggers,
            'procedures' => $procedures
        );

        return $data;
    }

    /**
     * Compare two schemas (as generated by the 'export' method.)
     *
     * @param string $schema1 The first database schema.
     * @param string $schema2 The second database schema.
     * @return array The results of the comparison.
     */
    function compare($schema1, $schema2) {

        $compareTables = self::compareTables($schema1, $schema2);
        $compareTriggers = self::compareTriggers($schema1, $schema2);
        $compareProcedures = self::compareProcedures($schema1, $schema2);
        return array_merge($compareTables, $compareTriggers, $compareProcedures);
    }

    /**
     * Compare tables, fields and types
     * @param type $schema1
     * @param type $schema2
     * @return string
     */
    public static function compareTables($schema1, $schema2) {
        $tables1 = array_keys($schema1['tables']);
        $tables2 = array_keys($schema2['tables']);

        $tables = array_unique(array_merge($tables1, $tables2));

        $results = array();

        foreach ($tables as $table_name) {

            // Check tables exist in both databases

            if (!isset($schema1['tables'][$table_name])) {

                $results[$table_name][] = '<em>' . $schema1['name']
                        . '</em> is missing table: <code>' . $table_name
                        . '</code>.';

                continue;
            }

            if (!isset($schema2['tables'][$table_name])) {

                $results[$table_name][] = '<em>' . $schema2['name']
                        . '</em> is missing table: <code>' . $table_name
                        . '</code>.';

                continue;
            }

            // Check fields exist in both tables

            $fields = array_merge($schema1['tables'][$table_name], $schema2['tables'][$table_name]);

            foreach ($fields as $field_name => $field) {

                if (!isset($schema1['tables'][$table_name][$field_name])) {

                    $results[$table_name][] = '<em>' . $schema1['name']
                            . '</em> is missing field: <code>' . $field_name
                            . '</code>';

                    continue;
                }

                if (!isset($schema2['tables'][$table_name][$field_name])) {

                    $results[$table_name][] = '<em>' . $schema2['name']
                            . '</em> is missing field: <code>' . $field_name
                            . '</code>';

                    continue;
                }

                // Check that the specific parameters of the fields match

                $s1_params = $schema1['tables'][$table_name][$field_name];
                $s2_params = $schema2['tables'][$table_name][$field_name];

                foreach ($s1_params as $name => $details) {
                    if ($s1_params[$name] != $s2_params[$name]) {
                        $results[$table_name][] = 'Field <code>' . $field_name
                                . '</code> differs between databases for parameter \''
                                . $name . '\'. <em>' . $schema1['name']
                                . '</em> has \'' . $s1_params[$name]
                                . '\' and <em>' . $schema2['name']
                                . '</em> has \'' . $s2_params[$name] . '\'.';
                    }
                }
            }
        }
        return $results;
    }

    /**
     * Compare triggers in both tables
     * @param type $schema1
     * @param type $schema2
     * @return string
     */
    public static function compareTriggers($schema1, $schema2) {
        $triggers1 = !empty($schema1['triggers']) ? array_keys($schema1['triggers']) : array();
        $triggers2 = !empty($schema2['triggers']) ? array_keys($schema2['triggers']) : array();
        $triggers = array_unique(array_merge($triggers1, $triggers2));
        $results = array();
        foreach ($triggers as $trigger_name) {
            //check trigger exists in both table
            if (!isset($schema1['triggers'][$trigger_name])) {
                $results[$trigger_name][] = '<em>' . $schema1['name']
                        . '</em> is missing trigger: <code>' . $trigger_name
                        . '</code>.';

                continue;
            }
            if (!isset($schema2['triggers'][$trigger_name])) {
                $results[$trigger_name][] = '<em>' . $schema2['name']
                        . '</em> is missing trigger: <code>' . $trigger_name
                        . '</code>.';

                continue;
            }

            //compare data of triggers
            $decodedTriggres1 = json_decode(base64_decode($schema1['triggers'][$trigger_name]), true);
            $decodedTriggres2 = json_decode(base64_decode($schema2['triggers'][$trigger_name]), true);

            foreach ($decodedTriggres1 as $field_name => $value) {
                if ($decodedTriggres1[$field_name] != $decodedTriggres2[$field_name]) {
                    $results[$trigger_name][] = 'Field <code><b>' . $field_name . '</b>'
                            . '</code> differs between triggers for parameter \''
                            . $field_name . '\'. <em>' . $schema1['name']
                            . '</em> has \'' . $decodedTriggres1[$field_name]
                            . '\' and <em>' . $schema2['name']
                            . '</em> has \'' . $decodedTriggres2[$field_name] . '\'.';
                }
            }
        }
        return $results;
    }

    /**
     * Compare procedures in both table
     * @param type $schema1
     * @param type $schema2
     * @return string
     */
    public static function compareProcedures($schema1, $schema2) {
        $procedures1 = !empty($schema1['procedures']) ? array_keys($schema1['procedures']) : array();
        $procedures2 = !empty($schema2['procedures']) ? array_keys($schema2['procedures']) : array();
        $procedures = array_unique(array_merge($procedures1, $procedures2));
        $results = array();
        foreach ($procedures as $procedure_name) {
            //check procedure exists in both table
            if (!isset($schema1['procedures'][$procedure_name])) {
                $results[$procedure_name][] = '<em>' . $schema1['name']
                        . '</em> is missing procedure: <code>' . $procedure_name
                        . '</code>.';

                continue;
            }
            if (!isset($schema2['procedures'][$procedure_name])) {
                $results[$procedure_name][] = '<em>' . $schema2['name']
                        . '</em> is missing procedure: <code>' . $procedure_name
                        . '</code>.';

                continue;
            }

            //compare data of procedures
            $decodedProcedures1 = json_decode(base64_decode($schema1['procedures'][$procedure_name]), true);
            $decodedProcedures2 = json_decode(base64_decode($schema2['procedures'][$procedure_name]), true);

            foreach ($decodedProcedures1 as $field_name => $value) {
                if ($decodedProcedures1[$field_name] != $decodedProcedures2[$field_name]) {
                    $results[$procedure_name][] = 'Field <code><b>' . $field_name . '</b>'
                            . '</code> differs between triggers for parameter \''
                            . $field_name . '\'. <em>' . $schema1['name']
                            . '</em> has \'' . $decodedProcedures1[$field_name]
                            . '\' and <em>' . $schema2['name']
                            . '</em> has \'' . $decodedProcedures2[$field_name] . '\'.';
                }
            }
        }
        return $results;
    }

}

?>
